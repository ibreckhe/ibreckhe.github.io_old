date_end <- as.Date(paste(i,"-12-31",sep=""))
tmax_exp_year <- paste("multiband_tmax_est_year_",i,".grd",sep="")
tmin_exp_year <- paste("multiband_tmin_est_year_",i,".grd",sep="")
tavg_exp_year <- paste("multiband_tavg_est_year_",i,".grd",sep="")
tavg_year <- tavg[tavg$DATE %in% seq(date_start,date_end,by="day"),]
tmin_year <- tmin[tmin$DATE %in% seq(date_start,date_end,by="day"),]
tmax_year <- tmax[tmax$DATE %in% seq(date_start,date_end,by="day"),]
out_string_tmax <- paste("../MORAclim_bayes/bayes_tmax_year_",i,sep="")
bayes_daily_anoms(exp_brick=tmax_exp_year,
exp_brick_path=brickpath,
meas_df=tmax_year,pp=FALSE,
meta=meta,preds=preds_180m,nsamples=1000,
out_prefix=out_string_tmax,
overwrite=TRUE)
out_string_tmin <- paste("../MORAclim_bayes/bayes_tmin_year_",i,sep="")
bayes_daily_anoms(exp_brick=tmin_exp_year,
exp_brick_path=brickpath,
meas_df=tmin_year,pp=FALSE,
meta=meta,preds=preds_180m,nsamples=1000,
out_prefix=out_string_tmin,
overwrite=TRUE)
i=275
print(paste("Bayesian estimates for day",i))
day_data <- data.frame(site=colnames(temp_year),
utmx_s=temp_meta_year$utmx_s,
utmy_s=temp_meta_year$utmy_s,
utmx=temp_meta_year$X_UTM,
utmy=temp_meta_year$Y_UTM,
elev=temp_meta_year$elev,
exp=as.numeric(temp_year_exp[i,]),
meas=as.numeric(temp_year[i,]),
anom=as.numeric(year_anom[i,]))
day_data_comp <- day_data[!is.na(day_data$anom),]
y <- day_data_comp$anom
coords <- cbind(day_data_comp$utmx_s,day_data_comp$utmy_s)
utmx_s <- scale(day_data_comp$utmx_s)
utmx_scale <- attributes(utmx_s)$'scaled:scale'
utmx_center <- attributes(utmx_s)$'scaled:center'
utmy_s <- scale(day_data_comp$utmy_s)
utmy_scale <- attributes(utmy_s)$'scaled:scale'
utmy_center <- attributes(utmy_s)$'scaled:center'
elev <- scale(day_data_comp$elev)
elev_scale <- attributes(elev)$'scaled:scale'
elev_center <- attributes(elev)$'scaled:center'
##Priors for Bayesian model.
p <- 6
starting <- list("phi"=3/0.5, "sigma.sq"=50, "tau.sq"=1)
tuning <- list("phi"=0.1, "sigma.sq"=0.1, "tau.sq"=0.1)
priors.1 <- list("beta.Norm"=list(rep(0,p), diag(10,p)),
"phi.Unif"=c(0.1, 300), "sigma.sq.IG"=c(2, 2),
"tau.sq.IG"=c(2, 0.1))
priors.2 <- list("beta.Flat", "phi.Unif"=c(3/1, 3/0.1),
"sigma.sq.IG"=c(2, 2), "tau.sq.IG"=c(2, 0.1))
cov.model <- "exponential"
n.samples <- nsamples * 80
n.report <- 2000
verbose <- TRUE
m.1 <- spLM(y~utmx_s+utmy_s+elev+elev:utmx_s + elev:utmy_s, coords=coords,starting=starting,pp=TRUE,
tuning=tuning, priors=priors.1, cov.model=cov.model,
n.samples=n.samples, verbose=verbose, n.report=n.report)
burn.in <- 0.75*n.samples
coords_pred <- xyFromCell(preds$utmx_s, cell=which(!is.na(preds$utmx_s[]))) / 1000
int_pred <- rep(1,dim(coords_pred)[1])
elev_pred <- (preds$elev[!is.na(preds$utmy_s[])] - elev_center) / elev_scale
utmx_s_pred <- (preds$utmx_s[!is.na(preds$utmx_s[])] - utmx_center) / utmx_scale
utmy_s_pred <- (preds$utmy_s[!is.na(preds$utmy_s[])] - utmy_center) / utmy_scale
covars_pred <- cbind(int_pred,utmx_s_pred,utmy_s_pred,elev_pred,utmx_s_pred*elev_pred,utmy_s_pred*elev_pred)
bayes_preds <- spPredict(m.1,pred.coords=coords_pred,pred.covars=covars_pred,
start=burn.in,end=n.samples,thin=20,n.report=10)
predAnom <- rowMeans(bayes_preds$p.y.predictive.samples)
predSD <- apply(bayes_preds$p.y.predictive.samples,FUN=sd,MARGIN = 1)
predAnom_rast <- preds$utmx_s
predAnom_rast[!is.na(preds$utmx_s)] <- predAnom
predSD_rast <- preds$utmx_s
predSD_rast[!is.na(preds$utmx_s)] <- predSD
##Resamples grid to 90m
predAnom_rast_res <- disaggregate(predAnom_rast,fact=3,method='bilinear')
predSD_rast_res <- disaggregate(predSD_rast,fact=3,method='bilinear')
predEst_rast <- (temp_exp_year[[i]] / 10000) + predAnom_rast_res
##Makes a plot
par(mfrow=c(1,3),oma=c(2,2,4,4))
plot(predEst_rast,main=paste("Estimate, Day",i),zlim=c(-15,35),
col=rev(rainbow(255)))
plot(predAnom_rast,main=paste("Anomaly, Day",i),zlim=c(-10,10),
col=colorRampPalette(c("blue", "white", "red"))(255))
plot(predSD_rast,main=paste("Kriging Variance, Day",i),zlim=c(0,3),
col=rev(heat.colors(255)))
filename <- paste(out_prefix,"_day_",sprintf("%04d", (start_num - 1 + i)),sep="")
predAnom_rast_res <- predAnom_rast_res * 10000
predSD_rast_res <- predSD_rast_res * 10000
predEst_rast <- predEst_rast * 10000
writeRaster(predAnom_rast_res,filename=paste(filename,"_anom.tif",sep=""),
datatype="INT4S",overwrite=overwrite)
writeRaster(predSD_rast_res,filename=paste(filename,"_se.tif",sep=""),
datatype="INT4S",overwrite=overwrite)
writeRaster(predEst_rast,
filename=paste(filename,"_est.tif",sep=""),
datatype="INT4S",overwrite=overwrite)
##Computes anomalies and daily prediction grids.
cl <- makeCluster(4)
registerDoParallel(cl)
foreach(i=2009:2015) %dopar% {
date_start <- as.Date(paste(i,"-01-01",sep=""))
date_end <- as.Date(paste(i,"-12-31",sep=""))
tmax_exp_year <- paste("multiband_tmax_est_year_",i,".grd",sep="")
tmin_exp_year <- paste("multiband_tmin_est_year_",i,".grd",sep="")
tavg_exp_year <- paste("multiband_tavg_est_year_",i,".grd",sep="")
tavg_year <- tavg[tavg$DATE %in% seq(date_start,date_end,by="day"),]
tmin_year <- tmin[tmin$DATE %in% seq(date_start,date_end,by="day"),]
tmax_year <- tmax[tmax$DATE %in% seq(date_start,date_end,by="day"),]
out_string_tmax <- paste("../MORAclim_bayes/bayes_tmax_year_",i,sep="")
bayes_daily_anoms(exp_brick=tmax_exp_year,
exp_brick_path=brickpath,
meas_df=tmax_year,pp=FALSE,
meta=meta,preds=preds_180m,nsamples=1000,
out_prefix=out_string_tmax,
overwrite=TRUE)
out_string_tmin <- paste("../MORAclim_bayes/bayes_tmin_year_",i,sep="")
bayes_daily_anoms(exp_brick=tmin_exp_year,
exp_brick_path=brickpath,
meas_df=tmin_year,pp=FALSE,
meta=meta,preds=preds_180m,nsamples=1000,
out_prefix=out_string_tmin,
overwrite=TRUE)
out_string_tavg <- paste("../MORAclim_bayes/bayes_tavg_year_",i,sep="")
bayes_daily_anoms(exp_brick=tavg_exp_year,
exp_brick_path=brickpath,
meas_df=tavg_year,pp=FALSE,
meta=meta,preds=preds_180m,nsamples=1000,
out_prefix=out_string_tavg,
overwrite=TRUE)
}
stopCluster(cl)
cl <- makeCluster(3)
registerDoParallel(cl)
foreach(i=2013:2015) %dopar% {
date_start <- as.Date(paste(i,"-01-01",sep=""))
date_end <- as.Date(paste(i,"-12-31",sep=""))
tmax_exp_year <- paste("multiband_tmax_est_year_",i,".grd",sep="")
tmin_exp_year <- paste("multiband_tmin_est_year_",i,".grd",sep="")
tavg_exp_year <- paste("multiband_tavg_est_year_",i,".grd",sep="")
tavg_year <- tavg[tavg$DATE %in% seq(date_start,date_end,by="day"),]
tmin_year <- tmin[tmin$DATE %in% seq(date_start,date_end,by="day"),]
tmax_year <- tmax[tmax$DATE %in% seq(date_start,date_end,by="day"),]
out_string_tmax <- paste("../MORAclim_bayes/bayes_tmax_year_",i,sep="")
bayes_daily_anoms(exp_brick=tmax_exp_year,
exp_brick_path=brickpath,
meas_df=tmax_year,pp=FALSE,
meta=meta,preds=preds_180m,nsamples=1000,
out_prefix=out_string_tmax,
overwrite=TRUE)
out_string_tmin <- paste("../MORAclim_bayes/bayes_tmin_year_",i,sep="")
bayes_daily_anoms(exp_brick=tmin_exp_year,
exp_brick_path=brickpath,
meas_df=tmin_year,pp=FALSE,
meta=meta,preds=preds_180m,nsamples=1000,
out_prefix=out_string_tmin,
overwrite=TRUE)
out_string_tavg <- paste("../MORAclim_bayes/bayes_tavg_year_",i,sep="")
bayes_daily_anoms(exp_brick=tavg_exp_year,
exp_brick_path=brickpath,
meas_df=tavg_year,pp=FALSE,
meta=meta,preds=preds_180m,nsamples=1000,
out_prefix=out_string_tavg,
overwrite=TRUE)
}
stopCluster(cl)
##Script to get attributes of microclimate sensor locations.
library(raster)
sensors <- read.csv("~/Dropbox/Lab/EcoForecasting_SDD_Phenology (1)/Data&Analysis/Microclimate/raw/sensor_locations_updated_5-11-2016.csv")
##Reads in the raster attribute data
env3 <- brick("/Volumes/ib_working/GIS/env_pred_3m.img",
crs=CRS("+proj=utm +zone=10 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"))
env_names <-c("rough","can_ht","can_pct","elev","isolt","slope","srad","tci_max","tci","snow_melt",
"ndvi","lidar_int","pond_stream","stream_dist")
env_titles <- c("Topographic Roughness","Canopy Ht. (m)","Canopy Cover (prop.)","Elevation (m)","Insolation Time (hrs)",
"Slope (deg)","Solar Rad (Wh/sq.m)","Topo Wetness","Max Topo Wetness","Snow Melt","NDVI",
"Lidar Intensity","Pond-Stream Area (sq m)","Stream Distance (m)")
names(env3) <- env_names
##Imports aspect and other supplementary data.
env3$asp <- raster('/Volumes/ib_working/GIS/MORA_aspect_3m.tif')
env3$tri <- raster('/Volumes/ib_working/GIS/MORA_TRI_3m.tif')
env3$cold <- raster('/Volumes/ib_working/GIS/MORA_coldair_3m.tif')
env3$srad_noc <- raster('/Volumes/ib_working/GIS/MORA_srad_yearsum_9m.tif')
elev_9m <- raster("/Volumes/ib_working/GIS/elev_NED_9m.tif")
cold_9m <- raster("/Volumes/ib_working/GIS/coldair_index_regional_9m.tif")
reg_cancov_27m <- raster("/Volumes/ib_working/GIS/reg_canopy_focal27m.tif")
reg_cancov_81m <- raster("/Volumes/ib_working/GIS/reg_canopy_focal81m.tif")
reg_cancov_243m <- raster("/Volumes/ib_working_GIS/reg_canopy_focal243m.tif")
canvol_81m <- raster('~/GIS/mcpred_canvol_81m.tif')
cancov_81m <- raster('~/GIS/mcpred_canpct_81m.tif')
dry_81m <- raster('/Volumes/ib_working/GIS/MORA_dry_index_81m.tif')
##Gets seasonal solar radiation.
srad_reg_DJF <- raster("/Volumes/ib_working/GIS/srad_seas_DJF.tiff")
srad_reg_MAM <- raster("/Volumes/ib_working/GIS/srad_seas_MAM.tiff")
srad_reg_JJA <- raster("/Volumes/ib_working/GIS/srad_seas_JJA.tiff")
srad_reg_SON <- raster("/Volumes/ib_working/GIS/srad_seas_SON.tiff")
##Gets UTM coordinates for the sensors.
coordinates(sensors) <- ~Long+Lat
sensors@data$Long <- coordinates(sensors)[,1]
sensors@data$Lat <- coordinates(sensors)[,2]
crs(sensors) <- "+proj=longlat +datum=WGS84 +ellps=WGS84 +no_defs"
##Transforms the coordinates to UTM and appends coordinates to the data frame.
sensors_UTM <- spTransform(sensors,CRS("+proj=utm +zone=10 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"))
sensors_UTM@data$X_UTM <- coordinates(sensors_UTM)[,1]
sensors_UTM@data$Y_UTM <- coordinates(sensors_UTM)[,2]
##Samples the raster brick at the sensor locations.
sensors_attrib <- extract(env3,sensors_UTM,method='simple',sp=T)
sensors_attrib@data$elev <- extract(elev_9m,sensors_UTM,method="simple")
sensors_attrib@data$cair_reg_9m <- extract(cold_9m,sensors_UTM,method="simple")
sensors_attrib@data$reg_cancov_27m <- extract(reg_cancov_27m,sensors_UTM,method="simple")
sensors_attrib@data$reg_cancov_81m <- extract(reg_cancov_81m,sensors_UTM,method="simple")
sensors_attrib@data$reg_cancov_243m <- extract(reg_cancov_243m,sensors_UTM,method="simple")
sensors_attrib@data$canvol_81m <- extract(canvol_81m,sensors_UTM,method="simple")
sensors_attrib@data$cancov_81m <- extract(cancov_81m,sensors_UTM,method="simple")
sensors_attrib@data$dry_index_81m <- extract(dry_81m,sensors_UTM,method="simple")
sensors_attrib@data$srad_seas_DJF <- extract(srad_reg_DJF,sensors_UTM,method="simple")
sensors_attrib@data$srad_seas_MAM <- extract(srad_reg_MAM,sensors_UTM,method="simple")
sensors_attrib@data$srad_seas_JJA <- extract(srad_reg_JJA,sensors_UTM,method="simple")
sensors_attrib@data$srad_seas_SON <- extract(srad_reg_SON,sensors_UTM,method="simple")
##Computes the average, solar radiation, canopy height and percentage within 30m
sensors_attrib@data$can_ht_30m <- extract(env3$can_ht,sensors_UTM,buffer=30,fun=mean)
library(raster)
sensors <- read.csv("~/Dropbox/Lab/EcoForecasting_SDD_Phenology (1)/Data&Analysis/Microclimate/raw/sensor_locations_updated_5-11-2016.csv")
##Reads in the raster attribute data
env3 <- brick("/Volumes/ib_working/GIS/env_pred_3m.img",
crs=CRS("+proj=utm +zone=10 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"))
env_names <-c("rough","can_ht","can_pct","elev","isolt","slope","srad","tci_max","tci","snow_melt",
"ndvi","lidar_int","pond_stream","stream_dist")
env_titles <- c("Topographic Roughness","Canopy Ht. (m)","Canopy Cover (prop.)","Elevation (m)","Insolation Time (hrs)",
"Slope (deg)","Solar Rad (Wh/sq.m)","Topo Wetness","Max Topo Wetness","Snow Melt","NDVI",
"Lidar Intensity","Pond-Stream Area (sq m)","Stream Distance (m)")
names(env3) <- env_names
##Imports aspect and other supplementary data.
env3$asp <- raster('/Volumes/ib_working/GIS/MORA_aspect_3m.tif')
env3$tri <- raster('/Volumes/ib_working/GIS/MORA_TRI_3m.tif')
env3$cold <- raster('/Volumes/ib_working/GIS/MORA_coldair_3m.tif')
env3$srad_noc <- raster('/Volumes/ib_working/GIS/MORA_srad_yearsum_9m.tif')
elev_9m <- raster("/Volumes/ib_working/GIS/elev_NED_9m.tif")
cold_9m <- raster("/Volumes/ib_working/GIS/coldair_index_regional_9m.tif")
reg_cancov_27m <- raster("/Volumes/ib_working/GIS/reg_canopy_focal27m.tif")
reg_cancov_81m <- raster("/Volumes/ib_working/GIS/reg_canopy_focal81m.tif")
reg_cancov_243m <- raster("/Volumes/ib_working/GIS/reg_canopy_focal243m.tif")
canvol_81m <- raster('/Volumes/ib_working/GIS/mcpred_canvol_81m.tif')
cancov_81m <- raster('/Volumes/ib_working/GIS/mcpred_canpct_81m.tif')
dry_81m <- raster('/Volumes/ib_working/GIS/MORA_dry_index_81m.tif')
##Gets seasonal solar radiation.
srad_reg_DJF <- raster("/Volumes/ib_working/GIS/srad_seas_DJF.tiff")
srad_reg_MAM <- raster("/Volumes/ib_working/GIS/srad_seas_MAM.tiff")
srad_reg_JJA <- raster("/Volumes/ib_working/GIS/srad_seas_JJA.tiff")
srad_reg_SON <- raster("/Volumes/ib_working/GIS/srad_seas_SON.tiff")
##Gets UTM coordinates for the sensors.
coordinates(sensors) <- ~Long+Lat
sensors@data$Long <- coordinates(sensors)[,1]
sensors@data$Lat <- coordinates(sensors)[,2]
crs(sensors) <- "+proj=longlat +datum=WGS84 +ellps=WGS84 +no_defs"
##Transforms the coordinates to UTM and appends coordinates to the data frame.
sensors_UTM <- spTransform(sensors,CRS("+proj=utm +zone=10 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"))
sensors_UTM@data$X_UTM <- coordinates(sensors_UTM)[,1]
sensors_UTM@data$Y_UTM <- coordinates(sensors_UTM)[,2]
##Samples the raster brick at the sensor locations.
sensors_attrib <- extract(env3,sensors_UTM,method='simple',sp=T)
sensors_attrib@data$elev <- extract(elev_9m,sensors_UTM,method="simple")
sensors_attrib@data$cair_reg_9m <- extract(cold_9m,sensors_UTM,method="simple")
sensors_attrib@data$reg_cancov_27m <- extract(reg_cancov_27m,sensors_UTM,method="simple")
sensors_attrib@data$reg_cancov_81m <- extract(reg_cancov_81m,sensors_UTM,method="simple")
sensors_attrib@data$reg_cancov_243m <- extract(reg_cancov_243m,sensors_UTM,method="simple")
sensors_attrib@data$canvol_81m <- extract(canvol_81m,sensors_UTM,method="simple")
sensors_attrib@data$cancov_81m <- extract(cancov_81m,sensors_UTM,method="simple")
sensors_attrib@data$dry_index_81m <- extract(dry_81m,sensors_UTM,method="simple")
sensors_attrib@data$srad_seas_DJF <- extract(srad_reg_DJF,sensors_UTM,method="simple")
sensors_attrib@data$srad_seas_MAM <- extract(srad_reg_MAM,sensors_UTM,method="simple")
sensors_attrib@data$srad_seas_JJA <- extract(srad_reg_JJA,sensors_UTM,method="simple")
sensors_attrib@data$srad_seas_SON <- extract(srad_reg_SON,sensors_UTM,method="simple")
##Computes the average, solar radiation, canopy height and percentage within 30m
sensors_attrib@data$can_ht_30m <- extract(env3$can_ht,sensors_UTM,buffer=30,fun=mean)
sensors_attrib@data$canopy_pct_30m <- extract(env3$can_pct,sensors_UTM,buffer=30,fun=mean)
sensors_attrib@data$srad_can_30m <- extract(env3$srad,sensors_UTM,buffer=30,fun=mean)
##Subsets air tempertature sites.
sensors_airtemp <- subset(sensors_attrib,sub_site2 %in% c("A1","A2","A-1","A-2"))
sensors_airtemp$type <- "DataLogger"
sensors_airtemp$type[sensors_airtemp$study %in% c("MesoWest","NPSClimate")] <- "WeatherStation"
write.csv(sensors_airtemp,"/Users/ian/Dropbox/Lab/EcoForecasting_SDD_Phenology (1)/Data&Analysis/Microclimate/raw/airtemp_sensor_metadata_2016.csv",row.names=FALSE)
##Script to assemble snow cover data for 2009 to 2015.
library(xts)
library(dplyr)
setwd("~/Dropbox/Lab/EcoForecasting_SDD_Phenology (1)/Data&Analysis/Microclimate/processed/unflagged/")
snowmeta <- read.csv("../Snow_cover_meta_cleaned_geo_10_16_2015.csv")
raw_files <- list.files(".",pattern=".csv")
snow_fun <- function(ts){
(min(ts) - max(ts)) < 1 & max(ts) < 2
}
##Loops through each file and estimates whether there was snow on each day.
for(i in 425:length(raw_files)){
print(paste("Now processing file ",i," of ",length(raw_files)))
d <- read.csv(raw_files[i])
d <- d[complete.cases(d),]
d$DATE <- paste(d$YEAR,d$MONTH,d$DAY,sep="-")
d$TIME <- paste(d$HOUR,":00",sep="")
d$DATETIME <- as.POSIXct(paste(d$DATE,d$TIME,sep=" "),tz="Etc/GMT-7")
ts <- xts(d$TEMP,order.by=d$DATETIME)
ts_min_daily <- apply.daily(ts,FUN=min)
ts_max_daily <- apply.daily(ts,FUN=max)
ts_snow <- apply.daily(ts,FUN=snow_fun)
df <- data.frame(datetime=as.Date(index(ts_snow)),
min_temp_C=ts_min_daily,
max_temp_C=ts_max_daily,
snow=ts_snow)
write.csv(df,paste("../daily_soiltemp/",raw_files[i],sep=""),row.names=FALSE)
}
##Constructs a daily dataset with all sensors.
setwd("../daily_soiltemp/")
sites <- unique(snowmeta$site_sensor)
daily_files <- list.files(".",pattern=".csv")
days <- seq(as.Date("2009-09-01"),as.Date("2015-09-30"),by="day")
day_ts <- xts(rep(FALSE,length(days)),order.by=days)
for (i in 1:length(sites)){
print(paste("Processing site",sites[i]))
site_files <- unique(snowmeta$out_filename[snowmeta$site_sensor==sites[i]])
site_daily <- daily_files[daily_files %in% site_files]
fd <- read.csv(site_daily[1])
ts_all <- xts(fd$snow,order.by=as.Date(fd$datetime))
if(length(site_daily)>=2){
for(j in 2:length(site_daily)){
fd <- read.csv(site_daily[j])
ts <- xts(fd$snow,order.by=as.Date(fd$datetime))
ts_all <- c(ts_all,ts)
}
}
names(ts_all) <- sites[i]
day_ts <- merge(day_ts,ts_all,all=c(TRUE,FALSE))
}
day_df <- data.frame(datetime=index(day_ts),day_ts)
DOY <- as.numeric(format(day_df$datetime,format="%j"))
Year <- as.numeric(format(day_df$datetime,format="%Y"))
##Replaces missing summer measurements with zeros.
for(i in 2009:2015){
for(j in 2:ncol(day_df)){
prevtest <- !is.na(day_df[Year==i,j][1])
nexttest <- any(!is.na(day_df[Year==i & DOY >= 273,j]))
if(prevtest & nexttest){
daysnow <- day_df[Year==i,j]
daysnow[is.na(daysnow)] <- 0
day_df[Year==i,j] <- daysnow
}
}
}
day_df <- day_df[,-2]
write.csv(day_df,"../snow_cover_daily_allsites.csv",row.names=FALSE)
##Loops through each day and fits a logistic regression to predict probability of snow.
setwd("~/Dropbox/Lab/EcoForecasting_SDD_Phenology (1)/Data&Analysis/Microclimate/processed/unflagged/")
snowmeta <- read.csv("../microclimate_snow_coords_final_10_19_15.csv")
snowmeta$sensor_name2 <- gsub("-",".",snowmeta$sensor_name,fixed=TRUE)
snowmeta$sensor_name2 <- gsub("1791.STR","X1791.STR",fixed=TRUE,snowmeta$sensor_name2)
snowmeta$sensor_name2 <- gsub("1901.STR","X1901.STR",fixed=TRUE,snowmeta$sensor_name2)
##Reads in rasters of predictors
library(raster)
setwd("/Volumes/ib_working/GIS/")
elev3m <- raster("mcpred_elev_3m.tif")
elev <- aggregate(elev3m,fact=30,fun=mean)
coldair3m <-raster("mcpred_reg_coldair_3m.tif")
coldair <- aggregate(coldair3m,fact=30,fun=mean)
srad3m <- raster("mcpred_srad_MAM_3m.tif")
srad <- aggregate(srad3m,fact=30,fun=mean)
slope3m <- raster("mcpred_slope.tif")
slope <- aggregate(slope3m,fact=30,fun=mean)
cancov3m <- raster("MORA_can_pct_3m.tif")
cancov_raw <- aggregate(cancov3m,fact=30,fun=mean)
utmx3m <- raster("mcpred_utmx_3m.tif")
utmx <- aggregate(utmx3m,fact=30,fun=mean)
utmy3m <- raster("mcpred_utmy_3m.tif")
utmy <- aggregate(utmy3m,fact=30,fun=mean)
preds <- stack(elev,coldair,srad,slope,cancov,utmx,utmy)
names(preds) <- c("elev","coldair","srad","slope","cancov","utmx","utmy")
preds$utmx_s <- preds$utmx / 1000
preds$utmy_s <- preds$utmy / 1000
pred_crs <- crs(elev3m)
snow_site_meta <- data.frame(site=snowmeta$sensor_name2,
utmx=snowmeta$X_UTM,
utmy=snowmeta$Y_UTM)
snow_site_meta <- unique(snow_site_meta)
cancov <- aggregate(cancov3m,fact=30,fun=mean)
names(preds) <- c("elev","coldair","srad","slope","cancov","utmx","utmy")
preds$utmx_s <- preds$utmx / 1000
preds$utmy_s <- preds$utmy / 1000
pred_crs <- crs(elev3m)
preds <- stack(elev,coldair,srad,slope,cancov,utmx,utmy)
names(preds) <- c("elev","coldair","srad","slope","cancov","utmx","utmy")
preds$utmx_s <- preds$utmx / 1000
preds$utmy_s <- preds$utmy / 1000
pred_crs <- crs(elev3m)
snow_site_meta <- data.frame(site=snowmeta$sensor_name2,
utmx=snowmeta$X_UTM,
utmy=snowmeta$Y_UTM)
snow_site_meta <- unique(snow_site_meta)
preds
plot(preds)
install.packages("devtools")
install.packages("rjags")
install.packages("rjags")
install.packages("rjags")
install.packages("rstanarm", type = "source")
install.packages('rjags')
y
install.packages('rjags')
install.packages('rjags')
install.packages('rgdal')
q()
install.packages("devtools")
install.packages("rjags")
install.packages("rgdal")
library(rgdal)
library(rjags)
ann_tavg <- raster("/Volumes/ib_working/MORAclim_summaries/ann_tavg_sum.tif")
install.packages("raster")
ann_tavg <- brick("/Volumes/ib_working/MORAclim_summaries/ann_tavg_sum.tif")
ann_tmin <- brick("/Volumes/ib_working/MORAclim_summaries/ann_tmin_sum.tif")
ann_tmax <- brick("/Volumes/ib_working/MORAclim_summaries/ann_tmax_sum.tif")
sum_tmax <- brick("/Volumes/ib_working/MORAclim_summaries/jja_tmax_sum.tif")
win_tmin <- brick("/Volumes/ib_working/MORAclim_summaries/djf_tmin_sum.tif")
library(raster)
##Loads data.
ann_tavg <- brick("/Volumes/ib_working/MORAclim_summaries/ann_tavg_sum.tif")
ann_tmin <- brick("/Volumes/ib_working/MORAclim_summaries/ann_tmin_sum.tif")
ann_tmax <- brick("/Volumes/ib_working/MORAclim_summaries/ann_tmax_sum.tif")
sum_tmax <- brick("/Volumes/ib_working/MORAclim_summaries/jja_tmax_sum.tif")
win_tmin <- brick("/Volumes/ib_working/MORAclim_summaries/djf_tmin_sum.tif")
plot(ann_tavg[[1]])
ann_tavg
plot(ann_tavg[[6]])
plot(ann_tmax[[6]])
plot(ann_tmin[[6]])
plot((ann_tmin[[6]]+ann_tmax[[6]])/2)
plot(ann_tmax[[5]])
plot(ann_tavg[[6]])
preds <- brick("/Volumes/ib_working/MORAclim_preds/moraclim_preds_2016.grd")
preds
?raster::aggregate
preds_90m <- aggregate(preds,fact=30,expand=TRUE,na.rm=TRUE,
filename="mcpreds_2016_90m.grd")
preds_90m <- aggregate(preds,fact=30,expand=TRUE,na.rm=TRUE,
filename="~/GIS/mcpreds_2016_90m.grd")
plot(preds_90m)
getwd()
preds_90m
plot(ann_tavg[[1]]~preds_90m[[5]])
plot(ann_tavg[[1]],preds_90m[[5]])
ann_tavg[[1]]
preds[[1]]
preds_90m[[1]]
mat_lm <- lm(ann_tavg[[1]][]~preds_90m[[5]][])
summary(mat_lm)
mat_pred <- preds_90m[[1]]
mat_pred[] <- predict(mat_lm)
length(ann_tavg[[1]][])
pred_vals <- predict(mat_lm)
length(pred_vals)
?predict.lm
mat_pred[] <- predict(mat_lm,newdata=preds_90m[[5]][])
mat_lm <- lm(ann_tavg[[1]][]~preds_90m[[5]][])
length(preds_90m[[5]][])
mat_data <- data.frame(tavg=ann_tavg[[1]][],elev=preds_90m[[5]][])
mat_lm <- lm(tavg~elev,data=mat_data)
mat_pred <- preds_90m[[1]]
mat_pred[] <- predict(mat_lm,newdata=mat_data)
plot(mat_pred)
mat_resid <- ann_tavg[[1]] - mat_pred
plot(mat_resid)
sum_tmax_data <- data.frame(tmax=sum_tmax[[1]][],elev=preds_90m[[5]][])
sum_tmax_lm <- lm(tmax~elev,data=sum_tmax_data)
sum_tmax_pred <- preds_90m[[1]]
sum_tmax_data <- data.frame(tmax=sum_tmax[[1]][],elev=preds_90m[[5]][])
sum_tmax_lm <- lm(tmax~elev,data=sum_tmax_data)
sum_tmax_pred <- preds_90m[[1]]
sum_tmax_pred[] <- predict(sum_tmax_lm,newdata=sum_tmax_data)
sum_tmax_resid <- sum_tmax[[1]] - sum_tmax_pred
plot(sum_tmax_resid)
plot(sum_tmax)
##Creates a map with extreme summer tmax deviation from elevation trend.
ext_tmax_data <- data.frame(tmax=sum_tmax[[5]][],elev=preds_90m[[5]][])
ext_tmax_lm <- lm(tmax~elev,data=ext_tmax_data)
ext_tmax_pred <- preds_90m[[1]]
ext_tmax_pred[] <- predict(ext_tmax_lm,newdata=ext_tmax_data)
ext_tmax_resid <- sum_tmax[[5]] - ext_tmax_pred
plot(ext_tmax_resdi)
plot(ext_tmax_resid)
plot(ext_tmax_resid~preds_90m[[3]])
plot(ext_tmax_resid[]~preds_90m[[3]][])
preds_90m
plot(ext_tmax_resid[]~preds_90m[[3]][],pch=".")
plot(win_tmin)
ext_tmin_data <- data.frame(tmin=win_tmin[[5]][],elev=preds_90m[[5]][])
ext_tmin_lm <- lm(tmin~elev,data=ext_tmin_data)
ext_tmin_pred <- preds_90m[[1]]
ext_tmin_pred[] <- predict(ext_tmin_lm,newdata=ext_tmin_data)
ext_tmin_resid <- win_tmin[[2]] - ext_tmin_pred
plot(ext_tmin_resid)
plot(ext_tmin_resid,bty="n")
##Creates a map with extreme winter tmin deviation from elevation trend.
ext_tmin_data <- data.frame(tmin=win_tmin[[2]][],elev=preds_90m[[5]][])
ext_tmin_lm <- lm(tmin~elev,data=ext_tmin_data)
ext_tmin_pred <- preds_90m[[1]]
ext_tmin_pred[] <- predict(ext_tmin_lm,newdata=ext_tmin_data)
ext_tmin_resid <- win_tmin[[2]] - ext_tmin_pred
plot(ext_tmin_resid)
q()
getwd()
setwd("~/code/ibreckhe.github.io/Rmd_sources/")
list.files()
render("2016-07-22-MORAclim-intro.Rmd")
install.packages("leaflet","shiny")
365 - 258
